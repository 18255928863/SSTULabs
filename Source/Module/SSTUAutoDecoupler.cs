//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace SSTUTools
{
	public class SSTUAutoDecoupler : PartModule
	{
		[KSPField]
		public string nodeName = "bottom";

		[KSPField]
		public float explosiveForce = 10;

		//persistant
		[KSPField(isPersistant=true)]
		public bool decouplerAdded = false;

		private Part decouplerPart;
				
		[KSPEvent(guiName = "Add Decoupler", guiActiveEditor=true)]
		public void addDecoupler()
		{
			if (decouplerPart == null && !decouplerAdded)
			{
				addDecouplerPart ();
			}
			updateGuiState ();
		}

		[KSPEvent(guiName = "Remove Decoupler", guiActiveEditor=true)]
		public void removeDecoupler()
		{
			if (decouplerPart != null || decouplerAdded)
			{
				deleteDecoupler();
			}
			updateGuiState ();
		}

		public override void OnLoad (ConfigNode node)
		{
			base.OnLoad (node);
			//NOOP?
		}

		public override void OnStart (StartState state)
		{
			base.OnStart (state);
			if (decouplerAdded)
			{
				//find decoupler part from node
				AttachNode node = part.findAttachNode(nodeName);
				Part attachedPart = node.attachedPart;
				if(attachedPart!=null && attachedPart.GetComponent<ModuleAnchoredDecoupler>()!=null)
				{
					decouplerPart = attachedPart;
				}
			}
			updateGuiState ();
		}

		private void addDecouplerPart()
		{
			AttachNode node = part.findAttachNode (nodeName);
			if (node == null)
			{
				print ("ERROR, could not add decoupler part; no attach node for name: "+nodeName);
				return;
			}
			if (node.attachedPart != null)
			{
				print ("attach node contains attached part, adjusting parentage and joints!");
				insertDecouplerBetween (node.attachedPart);
			}
			else
			{
				insertDecouplerAfter();
			}
		}

		private void insertDecouplerBetween(Part beforePart)
		{

		}

		private void insertDecouplerAfter()
		{

		}

		private void deleteDecoupler()
		{

		}

		private void updateGuiState()
		{

		}

	}
}

